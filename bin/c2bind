#!perl
use strict;
use warnings FATAL => 'all';
use diagnostics;
use MarpaX::Languages::C::Scan;
use Getopt::Long;
use Pod::Usage;
use POSIX qw/EXIT_FAILURE EXIT_SUCCESS/;
use Config;
use IO::String;
use Data::Dumper;
use XML::LibXML;
use Log::Log4perl qw/:easy/;
use Log::Any::Adapter;
use Log::Any qw/$log/;

# ABSTRACT: C Binding interface generation

# VERSION

# PODNAME: c2bind

# --------------------
# Command line options
# --------------------
my $help = 0;
my $cpprun = undef;
my @cppflags = ();
my @lang = ();
my $filter = undef;
my @xpathDirectories = ();
my $xslt = undef;
my $loglevel = 'WARN';
my $logstderr = 0;
my $out = '';
my $err = '';

Getopt::Long::Configure("pass_through");
GetOptions ('help!' => \$help,
            'lang=s' => \@lang,
            'cpprun=s' => \$cpprun,
            'cppflags=s' => \@cppflags,
            'filter=s' => \$filter,
            'xpath=s' => \@xpathDirectories,
            'xslt=s' => \$xslt,
            'loglevel=s' => \$loglevel,
            'logstderr!' => \$logstderr,
	    'debug' => sub { $loglevel = 'DEBUG' },
	    'info' => sub { $loglevel = 'INFO' },
	    'warn' => sub { $loglevel = 'WARN' },
	    'error' => sub { $loglevel = 'ERROR' },
	    'fatal' => sub { $loglevel = 'FATAL' },
	    'trace' => sub { $loglevel = 'TRACE' },
            'out=s' => \$out,
            'err=s' => \$err);

# ------------------------------------------------------------------
# Do redirection asap, i.e. now, err first, unless help is requested
# ------------------------------------------------------------------
my $saveerr = undef;
my $saveout = undef;
if (! $help) {
    my $saveerr = _redirect(\*STDERR, $err);
    my $saveout = _redirect(\*STDOUT, $out);
    sub END {
        _unredirect(\*STDOUT, $saveout);
        _unredirect(\*STDERR, $saveerr);
    }
}

# ---------------
# Initializations
# ---------------
my $defaultLog4perlConf = <<DEFAULT_LOG4PERL_CONF;
log4perl.rootLogger              = $loglevel, Screen
log4perl.appender.Screen         = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr  = $logstderr
log4perl.appender.Screen.layout  = PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = %d %-5p %6P %m{chomp}%n
DEFAULT_LOG4PERL_CONF
Log::Log4perl::init(\$defaultLog4perlConf);
Log::Any::Adapter->set('Log4perl');

my $guard = quotemeta('(if you read this message, do not worry: this is replaced by correct value at run-time)');
my $pod = do {local $/; <DATA>};
$pod =~ s/\$CPPRUN\b\s*$guard/$Config{cpprun}/g;
$pod =~ s/\$CPPFLAGS\b\s*$guard/$Config{cppflags}/g;
my $podfh = IO::String->new($pod);
my $hasAtLeastOneFilenameInARGV = grep {-e $_} @ARGV;
pod2usage(-verbose => 2, -noperldoc => 1, -input => $podfh, -exitval => EXIT_SUCCESS) if ($help || ! $hasAtLeastOneFilenameInARGV);

# -----------------------------------------------------------------------------
# If there is more than one thing in @ARGV, assume these are (@cppflags, $file)
# -----------------------------------------------------------------------------
if ($#ARGV > 0) {
    push(@cppflags, splice(@ARGV, 0, $#ARGV));
}

# --------------------
# Post-process options
# --------------------
#
# If filter starts with '/' assume this is a regexp
#
if (defined($filter)) {
    if (substr($filter, 0, 1) eq '/') {
        $filter = eval "qr$filter"; ## no critic (ProhibitStringyEval)
        die $@ if ($@);
    }
}

# -----------
# Parse files
# -----------
my %config = ();
$config{cpprun} = $cpprun if ($cpprun);
$config{cppflags} = join(' ', @cppflags) if (@cppflags);
$config{filename_filter} = $filter if ($filter);
$config{xpathDirectories} = \@xpathDirectories;
$config{asDOM} = 1;

my $c = MarpaX::Languages::C::Scan->new(filename => shift, %config);

# -----------------------
# Give wanted information
# -----------------------
my $topDeclarations = $c->topDeclarations();
if ($log->is_info) {
    $log->infof("Top declarations:\n%s", $topDeclarations->toString(1));
}

# -------
# The end
# -------
exit(EXIT_SUCCESS);

# ------------------------------------------------------

sub _redirect {
    my ($fh, $filename) = @_;

    my $savefh = undef;

    if (defined($filename) && "$filename") {
        if (! open($savefh, '>&', $fh)) {
            warn "Cannot save $fh handle, $!";
        } else {
            if (! open($fh, '>', $filename)) {
                warn "Cannot redirect $fh to $filename, $!";
                if (! open($fh, '>&', $savefh)) {
                    warn "Cannot restore $fh, $!";
                }
                $savefh = undef;
            } else {
                #
                # Unbuffer the redirected filehandle
                #
                my $oldfh = select($fh);
                $| = 1;
                select($oldfh);
            }
        }
    }
    return $savefh;
}

# ------------------------------------------------------

sub _unredirect {
    my ($fh, $savefh) = @_;

    if (defined($savefh)) {
        if (! close($fh)) {
            warn "Cannot close $fh";
        }
        #
        # Unredirect anyway
        #
        if (! open($fh, '>&', $savefh)) {
            warn "Cannot restore $fh, $!";
        }
    }
}

__DATA__

# --------------------------------------------------------------------------------------

=head1 NAME

c2bind - C Binding interface generation

=head1 SYNOPSIS

 c2bind [options]

 Startup Options:
   --help                  Brief help message.
   --lang <languages>      Target languages
   --cpprun <argument>     Preprocessor run command.
   --cppflags <arguments>  Preprocessor flags.
   --filter <argument>     File to look at after proprocessing. Defaults to file argument.
   --xpath <path>          XPath include path, prepended to default search path. Can be repeated.
   --xslt <path>           XSLT Include path, prepended to default search path
   --loglevel <level>      A level that has to be meaningful for Log::Log4perl, typically;
                           DEBUG, INFO, WARN, ERROR, FATAL or TRACE.
   --logstderr             Say if logs should go to standard error or not.
   --out <argument>        Redirect any output to this filename.
   --err <argument>        Redirect any error to this filename.

  Aliased options:
   --debug                 Alias to --loglevel DEBUG
   --info                  Alias to --loglevel INFO
   --warn                  Alias to --loglevel WARN
   --error                 Alias to --loglevel ERROR
   --fatal                 Alias to --loglevel FATAL
   --trace                 Alias to --loglevel TRACE

  Language specific options:
   --perl5 <sub-option>

=head1 OPTIONS

=over 8

=item B<--help>

This help

=item B<--cpprun <argument>>

cpp run command. Default is the value when perl was compiled, i.e.:

$CPPRUN (if you read this message, do not worry: this is replaced by correct value at run-time)

This option can be repeated.

=item B<--cppflags <argument>>

cpp flags. Default is the value when perl was compiled, i.e.:

$CPPFLAGS (if you read this message, do not worry: this is replaced by correct value at run-time)

=item B<--filter <argument>>

File to look at after proprocessing. Defaults to file argument.

c2bind is using the preprocessor. Every #include statement in your original source code is telling the preprocessor to look at another file, this is marked down by a line like:

 #line ... "information on the file processed"

in the generated output. The --filter argument is used to select which processed files is/are of interest. If $filter is starting with a slash "/" it is assumed to be a full regular expression (including modifier flags). The regexp can be used to handle the case of multiple input files.

=item B<--xpath <argument>>

XPath include path, prepended to default search path.

=item B<--xslt <argument>>

XSLT include path, prepended to default search path.

=item B<--loglevel level>

A level that has to be meaningful for Log::Log4perl, typically DEBUG, INFO, WARN, ERROR, FATAL or TRACE.
Default is WARN.

Note that tracing Marpa library itself is possible, but only using environment variable MARPA_TRACE /and/ saying --loglevel TRACE.

In case of trouble, typical debugging phases c2ast are:
--loglevel INFO
then:
--loglevel DEBUG
then:
--loglevel TRACE

=item B<--debug>

Shortcut for --loglevel DEBUG

=item B<--info>

Shortcut for --loglevel INFO

=item B<--warn>

Shortcut for --loglevel WARN

=item B<--error>

Shortcut for --loglevel ERROR

=item B<--fatal>

Shortcut for --loglevel FATAL

=item B<--trace>

Shortcut for --loglevel TRACE

=item B<--logstderr>

Logs to stderr or not. Default is $logstderr.

=item B<--out <argument>>

Redirect any output to this filename.

=item B<--err <argument>>

Redirect any error to this filename.

=back

=head1 EXAMPLES

 TODO

=head1 NOTES

Any unknown option on the command line is passed through to --cppflags. I.e.:

 c2bind --cppflags  -I/tmp/dir1 --cppflags -DMYDEFINE /tmp/file.c

and

 c2bind             -I/tmp/dir1 -DMYDEFINE /tmp/file.c

are equivalent.

=head1 SEE ALSO

L<MarpaX::Languages::C::Scan>
