MASM6.1
To be upgraded to VS 2013 c.f. http://msdn.microsoft.com/en-us/library/afzk3475.aspx

endOfLineOrComment ::= endOfLine
		   |   comment

equalDir	   ::= id '=' immExpr endOfLineOrComment

addOp		   ::= [+-]

aExpr		   ::= term
                   |   aExpr '&&' term

altId		   ::= id

arbitraryText  	   ::= charList

asmInstruction	   ::= mnemonic
                   |   mnemonic exprList

assumeDir	   ::= 'ASSUME':i assumeList endOfLineOrComment
		   |   'ASSUME':i 'NOTHING':i endOfLineOrComment

assumeList	   ::= assumeRegister
		   |   assumeList ',' assumeRegister

assumeReg	   ::= register ':' assumeVal

assumeRegister	   ::= assumeSegReg
		   |   assumeReg

assumeSegReg	   ::= segmentRegister ':' assumeSegVal

assumeSegVal	   ::= frameExpr
		   |   'NOTHING':i
		   |   'ERROR':i

assumeVal	   ::= qualifiedType
		   |   'NOTHING':i
		   |   'ERROR':i

bcdConst	   ::= sign decNumber
		   |        decNumber

binaryOp	   ::= '==' | '!=' | '>=' | '<=' | '>' | '<' | '&'

bitDef		   ::= bitFieldId ':' bitFieldSize
		   |   bitFieldId ':' bitFieldSize '=' constExpr

bitDefList	   ::= bitDef
		   |   bitDefList ',' bitDef
		   |   bitDefList ',' endOfLineOrComment  bitDef

bitFieldId	   ::= id

bitFieldSize	   ::= constExpr

blockStatements	   ::= directiveList
		   |   '.CONTINUE':i
		   |   '.CONTINUE':i '.IF':i cExpr
		   |   '.BREAK':i
		   |   '.BREAK':i '.IF':i cExpr

bool		   ::= 'TRUE':i
		   |   'FALSE':i

byteRegister	   ::= 'AL':i | 'AH':i | 'BL':i | 'BH':i | 'CL':i | 'CH':i | 'DL':i | 'DH':i

cExpr		   ::= aExpr
		   |   cExpr '||' aExpr

character	   ~   [\0-\9,\11-\255]

charList	   ::= character
		   |   charList character

className	   ::= string

nearfarMaybe	   ::= nearfar
nearfarMaybe	   ::=

langTypeMaybe	   ::= langType
langType	   ::=

commDecl	   ::= nearfarMaybe langTypeMaybe id ':' commType ':' constExpr
		   |   nearfarMaybe langTypeMaybe id ':' commType

commDir		   ::= 'COMM':i commList endOfLineOrComment

comment		   ::= ';' text endOfLineOrComment

commentDir	   ::= 'COMMENT':i delimiter text text delimiter text endOfLineOrComment

commList	   ::= commDecl
		   |   commList ',' commDecl

commType           ::= type
		   |   constExpr

constant	   ::= digits
		   |   digits radixOverride

constExpr	   ::= expr

contextDir	   ::= 'PUSHCONTEXT':i contextItemList endOfLineOrComment
		   |   'POPCONTEXT':i contextItemList endOfLineOrComment

contextItem	   ::= 'ASSUMES':i | 'RADIX':i | 'LISTING':i | 'CPU':i | 'ALL':i

contextItemList    ::= contextItem
		   |   contextItemList ',' contextItem

controlBlock	   ::= whileBlock
		   |   repeatBlock

controlDir	   ::= controlIf
		   |   controlBlock

controlElseif	   ::= '.ELSEIF':i cExpr endOfLineOrComment directiveList
		   |   '.ELSEIF':i cExpr endOfLineOrComment directiveList controlElseif

controlIf	   ::= '.IF':i cExpr endOfLineOrComment directiveList                                                           '.ENDIF':i endOfLineOrComment
		     | '.IF':i cExpr endOfLineOrComment directiveList               '.ELSE':i endOfLineOrComment directiveList '.ENDIF':i endOfLineOrComment
		     | '.IF':i cExpr endOfLineOrComment directiveList controlElseif                                             '.ENDIF':i endOfLineOrComment
		     | '.IF':i cExpr endOfLineOrComment directiveList controlElseif '.ELSE':i endOfLineOrComment directiveList '.ENDIF':i endOfLineOrComment

coprocessor	   ::= '.8087' | '.287' | '.387' | '.NO87':i

crefDir		   ::= crefOption endOfLineOrComment

crefOption	   ::= '.CREF':i
		   |   '.XCREF':i
		   |   '.XCREF':i idList
		   |   '.NOCREF':i
		   |   '.NOCREF':i idList

cxzExpr		   ::= expr
		   |   '!' expr
		   |   expr '==' expr
		   |   expr '!=' expr

dataDecl	   ::= 'DB':i | 'DW':i | 'DD':i | 'DF':i | 'DQ':i | 'DT':i | dataType | typeId

dataDir		   ::=    dataItem endOfLineOrComment
		   |   id dataItem endOfLineOrComment

dataItem	   ::= dataDecl  scalarInstList
		   |   structTag structInstList
		   |   typeId    structInstList
		   |   unionTag  structInstList
		   |   recordTag recordInstList

dataType	   ::= 'BYTE':i
		   |   'SBYTE':i
		   |   'WORD':i
		   |   'SWORD':i
		   |   'DWORD':i
		   |   'SDWORD':i
		   |   'FWORD':i
		   |   'QWORD':i
		   |   'TBYTE':i
		   |   'REAL4':i
		   |   'REAL8':i
		   |   'REAL10':i

decdigit	   ::= [0-9]

digits		   ::= decdigit
		   |   digits decdigit
		   |   digits hexdigit

decNumber	   ::= decdigit
		   |   decNumber decdigit

delimiter	   ::= [^\8\9\11-\13\26\32]

digits		   ::= decdigit
		   |   digits decdigit
		   |   digits hexdigit

directive	   ::= generalDir
		   |   segmentDef

directiveList	   ::= directive
		   |   directiveList directive

distance	   ::= nearfar
		   |   'NEAR16':i
		   |   'NEAR32':i
		   |   'FAR16':i
		   |   'FAR32':i

e01		   ::= e01 orOp e02
		   |   e02

e02		   ::= e02 'AND':i e03
		   |   e03

e03		   ::= 'NOT':i e04
		   |   e04

e04		   ::= e04 relOp e05
		   |   e05

e05		   ::= e05 addOp e06
		   |   e06

e06		   ::= e06 mulOp e07
		   |   e06 shiftOp e07
		   |   e07

e07		   ::= e07 addOp e08
		   |   e08

e08		   ::= 'HIGH':i e09
		   |   'LOW':i e09
		   |   'HIGHWORD':i e09
		   |   'LOWWORD':i e09
		   |   e09

e09		   ::= 'OFFSET':i e10
		   |   'SEG':i e10
		   |   'LROFFSET':i e10
		   |   'TYPE':i e10
		   |   'THIS':i e10
		   |   e09 'PTR':i e10
		   |   e09 ':':i e10
		   |   e10

e10		   ::= e10 '.' e11
		   |   e10 expr
		   |   e11

e11		   ::= '(' expr ')'
		   |   expr
		   |   'WIDTH':i id
		   |   'MASK':i id
		   |   'SIZE':i sizeArg
		   |   'SIZEOF':i sizeArg
		   |   'LENGTH':i id
		   |   'LENGTHOF':i id
		   |   recordConst
		   |   string
		   |   constant
		   |   type
		   |   id
		   |   '$'
		   |   segmentRegister
		   |   register
		   |   'ST':i
		   |   'ST':i '(' expr ')'

echoDir		 ::= 'ECHO':i arbitraryText endOfLineOrComment
		     '%OUT':i arbitraryText endOfLineOrComment

elseifBlock	 ::= elseifStatement endOfLineOrComment directiveList
		 |   elseifStatement endOfLineOrComment directiveList elseifBlock

elseifStatement	 ::= 'ELSEIF':i     constExpr
		 |   'ELSEIFE':i    constExpr
		 |   'ELSEIFB':i    textItem
		 |   'ELSEIFNB':i   textItem
		 |   'ELSEIFDEF':i  id
		 |   'ELSEIFNDEF':i id
		 |   'ELSEIFDIF':i  textItem ',' textItem
		 |   'ELSEIFDIFI':i textItem ',' textItem
		 |   'ELSEIFIDN':i  textItem ',' textItem
		 |   'ELSEIFIDNI':i textItem ',' textItem
		 |   'ELSEIF1':i
		 |   'ELSEIF2':i

endDir		 ::= 'END':i         endOfLineOrComment
		 |   'END':i immExpr endOfLineOrComment

endpDir		 ::= procId 'ENDP':i endOfLineOrComment

endsDir		 ::= id 'ENDS':i endOfLineOrComment

equDir		 ::= textMacroId 'EQU':i equType endOfLineOrComment

equType		 ::= immExpr
		 |   textLiteral

errorDir	 ::= errorOpt endOfLineOrComment

errorOpt	 ::= '.ERR':i
		 |   '.ERR':i     textItem
		 |   '.ERRE':i    constExpr
		 |   '.ERRE':i    constExpr optText
		 |   '.ERRNZ':i   constExpr
		 |   '.ERRNZ':i   constExpr optText
		 |   '.ERRB':i    textItem
		 |   '.ERRB':i    textItem optText
		 |   '.ERRNB':i   textItem
		 |   '.ERRNB':i   textItem optText
		 |   '.ERRDEF':i  id
		 |   '.ERRDEF':i  id optText
		 |   '.ERRNDEF':i id
		 |   '.ERRNDEF':i id optText
		 |   '.ERRDIF':i  textItem ',' textItem
		 |   '.ERRDIF':i  textItem ',' textItem optText
		 |   '.ERRDIFI':i textItem ',' textItem
		 |   '.ERRDIFI':i textItem ',' textItem optText
		 |   '.ERRIDN':i  textItem ',' textItem
		 |   '.ERRIDN':i  textItem ',' textItem optText
		 |   '.ERRIDNI':i textItem ',' textItem
		 |   '.ERRIDNI':i textItem ',' textItem optText
		 |   '.ERR1':i
		 |   '.ERR1':i    textItem
		 |   '.ERR2':i
		 |   '.ERR2':i    textItem

exitDir		 ::= '.EXIT':i      endOfLineOrComment
		 |   '.EXIT':i expr endOfLineOrComment

exitmDir:	 ::= 'EXITM':i
		 |   'EXITM':i textItem

exponent	 ::= E      decNumber
                 |   E sign decNumber

expr		 ::= 'SHORT':i e05
		 |   '.TYPE':i e01
		 |   'OPATTR':i e01
		 |   e01

exprList	 ::= expr
		 |   exprList ',' expr

langTypeMaybe    ::= langType
langTypeMaybe    ::=

externDef	 ::= langTypeMaybe id               ':' externType
		 |   langTypeMaybe id '(' altId ')' ':' externType

externDir	 ::= externKey externList endOfLineOrComment

externKey	 ::= 'EXTRN':i
		 |   'EXTERN':i
		 |   'EXTERNDEF':i

externList	 ::= externDef
		 |   externList ','                    externDef
		 |   externList ',' endOfLineOrComment externDef

externType	 ::= 'ABS':i
		 |   qualifiedType

fieldAlign	 ::= constExpr

fieldInit	 ::= initValue
		 |   structInstance

fieldInitList	 ::= fieldInit
		 |   fieldInitList ','                    fieldInit
		 |   fieldInitList ',' endOfLineOrComment fieldInit

fileChar	 ::= delimiter

fileCharList	 ::= fileChar
		 |   fileCharList fileChar

fileSpec	 ::= fileCharList
		 |   textLiteral

flagName	 ::= 'ZERO?':i
		 |   'CARRY?':i
		 |   'OVERFLOW?':i
		 |   'SIGN?':i
		 |   'PARITY?':i

floatNumber	 ::= sign decNumber '.' decNumber exponent
		 |   sign decNumber '.' decNumber
		 |   sign decNumber '.'           exponent
		 |   sign decNumber '.'
		 |        decNumber '.' decNumber exponent
		 |        decNumber '.' decNumber
		 |        decNumber '.'           exponent
		 |        decNumber '.'
		 |   digits R
		 |   digits r

forcDir		 ::= 'FORC':i
		 |   'IRPC':i

forDir		 ::= 'FOR':i
		 |   'IRP':i

forParm		 ::= id ':' forParmType
		 |   id

forParmType	 ::= 'REQ':i
		 |   '=' textLiteral

frameExpr	 ::= 'SEG':i id
		 |   'DGROUP':i ':' id
		 |   segmentRegister ':' id
		 |   id

generalDir	 ::= modelDir
		 |   segOrderDir
		 |   nameDir
		 |   includeLibDir
		 |   commentDir
		 |   groupDir
		 |   assumeDir
		 |   structDir
		 |   recordDir
		 |   typedefDir
		 |   externDir
		 |   publicDir
		 |   commDir
		 |   protoTypeDir
		 |   equDir
		 |   equalDir
		 |   textDir
		 |   contextDir
		 |   optionDir
		 |   processorDir
		 |   radixDir
		 |   titleDir
		 |   pageDir
		 |   listDir
		 |   crefDir
		 |   echoDir
		 |   ifDir
		 |   errorDir
		 |   includeDir
		 |   macroDir
		 |   macroCall
		 |   macroRepeat
		 |   purgeDir
		 |   macroWhile
		 |   macroFor
		 |   macroForc
		 |   aliasDir

gpRegister	 ::= 'AX':i
		 |   'EAX':i
		 |   'BX':i
		 |   'EBX':i
		 |   'CX':i
		 |   'ECX':i
		 |   'DX':i
		 |   'EDX':i
		 |   'BP':i
		 |   'EBP':i
		 |   'SP':i
		 |   'ESP':i
		 |   'DI':i
		 |   'EDI':i
		 |   'SI':i
		 |   'ESI':i

groupDir	 ::= groupId 'GROUP':i segIdList

groupId		 ::= id

hexdigit	 ::= [a-fA-F]

id		 ::= alpha
		 |   id alpha
		 |   id decdigit

idList		 ::= id
		 |   idList ',' id

ifDir		 ::= ifStatement endOfLineOrComment directiveList elseifBlock 'ELSE':i endOfLineOrComment directiveList 'ENDIF':i endOfLineOrComment
		 |   ifStatement endOfLineOrComment directiveList elseifBlock                                           'ENDIF':i endOfLineOrComment
		 |   ifStatement endOfLineOrComment directiveList             'ELSE':i endOfLineOrComment directiveList 'ENDIF':i endOfLineOrComment
		 |   ifStatement endOfLineOrComment directiveList                                                       'ENDIF':i endOfLineOrComment

ifStatement	 ::= 'IF':i constExpr
		 |   'IFE':i constExpr
		 |   'IFB':i textItem
		 |   'IFNB':i textItem
		 |   'IFDEF':i id
		 |   'IFNDEF':i id
		 |   'IFDIF':i textItem ',' textItem
		 |   'IFDIFI':i textItem ',' textItem
		 |   'IFIDN':i textItem ',' textItem
		 |   'IFIDNI':i textItem ',' textItem
		 |   'IF1':i
		 |   'IF2':i

immExpr		 ::= expr

includeDir	 ::= 'INCLUDE':i fileSpec endOfLineOrComment

includeLibDir	 ::= 'INCLUDELIB':i fileSpec endOfLineOrComment

initValue	 ::= immExpr
		 | string
		 | '?'
		 | constExpr 'DUP':i '(' scalarInstList ')'
		 | floatNumber
		 | bcdConst

inSegDir	 ::= labelDef inSegmentDir
		 |            inSegmentDir

inSegDirList	 ::= inSegDir
		 |   inSegDirList inSegDir

inSegmentDir	 ::= instruction
		 |   dataDir
		 |   controlDir
		 |   startupDir
		 |   exitDir
		 |   offsetDir
		 |   labelDir
		 |   procDir localDirList inSegDirList endpDir
		 |   procDir localDirList              endpDir
		 |   procDir              inSegDirList endpDir
		 |   procDir                           endpDir
		 |   invokeDir
		 |   generalDir

instrPrefix	 ::= 'REP':i
		 |   'REPE':i
		 |   'REPZ':i
		 |   'REPNE':i
		 |   'REPNZ':i
		 |   'LOCK':i

instruction	 ::= instrPrefix asmInstruction
		 |               asmInstruction

invokeArg	 ::= register '::' register
		 |   expr
		 |   'ADDR':i expr

invokeDir	 ::= 'INVOKE':i expr ',' endOfLineOrComment invokeList endOfLineOrComment
		 |   'INVOKE':i expr ','                    invokeList endOfLineOrComment
		 |   'INVOKE':i expr                                   endOfLineOrComment

invokeList	 ::= invokeArg
		 |   invokeList ',' endOfLineOrComment invokeArg
		 |   invokeList ','                    invokeArg

keyword		 ::= Any reserved word

keywordList	 ::= keyword
		 |   keyword keywordList

labelDef	 ::= id :
		 |   id '::'
		 |   '@@:'

labelDir	 ::= id 'LABEL':i qualifiedType endOfLineOrComment

langType	 ::= 'C':i
		 |   'PASCAL:i
		 |   'FORTRAN:i
		 |   'BASIC:i
		 |   'SYSCALL:i
		 |   'STDCALL:i

listDir		 ::= listOption endOfLineOrComment

listOption	 ::= '.LIST':i
		 |   '.NOLIST':i
		 |   '.XLIST':i
		 |   '.LISTALL':i
		 |   '.LISTIF':i
		 |   '.LFCOND':i
		 |   '.NOLISTIF':i
		 |   '.SFCOND':i
		 |   '.TFCOND':i
		 |   '.LISTMACROALL':i
		 |   '.LALL':i
		 |   '.NOLISTMACRO':i
		 |   '.SALL':i
		 |   '.LISTMACRO':i
		 |   '.XALL':i

localDef	 ::= 'LOCAL':i idList endOfLineOrComment

localDir	 ::= 'LOCAL':i parmList endOfLineOrComment

localDirList	 ::= localDir
		 |   localDirList localDir

localList	 ::= localDef
		 |   localList localDef

macroArg	 ::= '%' constExpr
		 |   '%' textMacroId
		 |   '%' macroFuncId '(' macroArgList ')'
		 |   string
		 |   arbitraryText
		 |   '<' arbitraryText '>'

macroArgList	 ::= macroArg
		 |   macroArgList ',' macroArg

macroBody	 ::= localList macroStmtList
		 |             macroStmtList

macroCall	 ::= id macroArgList endOfLineOrComment
		 |   id '(' macroArgList ')'

macroDir	 ::= id 'MACRO':i macroParmList endOfLineOrComment macroBody 'ENDM':i endOfLineOrComment
		 |   id 'MACRO':i               endOfLineOrComment macroBody 'ENDM':i endOfLineOrComment

macroFor	 ::= forDir forParm ',' '<' macroArgList '>' endOfLineOrComment macroBody 'ENDM':i endOfLineOrComment

macroForc	 ::= forcDir id ',' textLiteral endOfLineOrComment macroBody 'ENDM':i endOfLineOrComment

macroFuncId	 ::= id

macroId		 ::= macroProcId
		 |   macroFuncId

macroIdList	 ::= macroId
		 |   macroIdList ',' macroId

macroLabel	 ::= id

macroParm	 ::= id ':' parmType
		 |   id

macroParmList	 ::= macroParm
		 |   macroParmList ',' endOfLineOrComment macroParm
		 |   macroParmList ','                    macroParm

macroProcId	 ::= id

macroRepeat	 ::= repeatDir constExpr endOfLineOrComment macroBody 'ENDM':i endOfLineOrComment

macroStmt	 ::= directive
		 |   exitmDir
		 |   ':' macroLabel
		 |   'GOTO':i macroLabel

macroStmtList	 ::= macroStmt endOfLineOrComment
		 |   macroStmtList macroStmt endOfLineOrComment

macroWhile	 ::= 'WHILE':i constExpr endOfLineOrComment macroBody 'ENDM':i endOfLineOrComment

mapType		 ::= 'ALL':i | 'NONE':i | 'NOTPUBLIC':i

memOption	 ::= 'TINY':i
		 |   'SMALL':i
		 |   'MEDIUM':i
		 |   'COMPACT':i
		 |   'LARGE':i
		 |   'HUGE':i
		 |   'FLAT':i

mnemonic	 ::= Instruction name
